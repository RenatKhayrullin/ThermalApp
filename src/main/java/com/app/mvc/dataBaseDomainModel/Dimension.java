package com.app.mvc.dataBaseDomainModel;import org.codehaus.jackson.annotate.JsonIgnore;import javax.persistence.*;import java.io.Serializable;import java.util.HashSet;import java.util.Set;@Entity@Table(schema = "ont", name = "dimension")public class Dimension implements Serializable {	private Long id;    private String dimensionName;    private String dimensionDesignation;    @JsonIgnore    private Set<PhysicalQuantity> physicalQuantities = new HashSet<PhysicalQuantity>();    @JsonIgnore    private Set<PointOfMeasure> pointsOfMeasure = new HashSet<PointOfMeasure>();    public Dimension(){}    @Id    @GeneratedValue()    @Column(name = "id")    public Long getId(){        return this.id;    }    public void setId(Long id){        this.id = id;    }    @Column(name = "dimension_name")    public String getName(){        return this.dimensionName;    }    public void setName(String dimensionName){        this.dimensionName = dimensionName;    }    @Column(name = "dimension_designation")    public String getDimensionDesignation() { return this.dimensionDesignation; }    public void setDimensionDesignation(String dimensionDesignation) { this.dimensionDesignation =dimensionDesignation; }    @ManyToMany    @JoinTable(name = "quantity_dimension",    			joinColumns = @JoinColumn(name = "dimension_id"),    			inverseJoinColumns = @JoinColumn(name = "quantity_id"))    public Set<PhysicalQuantity> getPhysicalQuantities(){        return this.physicalQuantities;    }    public void setPhysicalQuantities(Set<PhysicalQuantity> physicalQuantities) { this.physicalQuantities = physicalQuantities; }    @OneToMany(mappedBy = "dimension", cascade = CascadeType.ALL,            orphanRemoval = true)    public Set<PointOfMeasure> getPointsOfMeasure(){        return this.pointsOfMeasure;    }    public void setPointsOfMeasure(Set<PointOfMeasure> pointsOfMeasure){        this.pointsOfMeasure = pointsOfMeasure;    }    public  void addData(PointOfMeasure pointOfMeasure){        pointOfMeasure.setDimension(this);        getPointsOfMeasure().add(pointOfMeasure);    }    public void removeData(PointOfMeasure pointOfMeasure){        getPointsOfMeasure().remove(pointOfMeasure);    }}